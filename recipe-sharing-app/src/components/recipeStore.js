// src/components/recipeStore.js

// Import the 'create' function from zustand to define our store.
import { create } from 'zustand';

// Define the Zustand store for managing recipes.
// 'create' takes a function that returns an object representing the store's state and actions.
const useRecipeStore = create((set) => ({
  // 'recipes' is the state variable, initialized as an empty array.
  recipes: [],

  // 'addRecipe' action: adds a new recipe to the existing array.
  addRecipe: (newRecipe) =>
    set((state) => ({
      recipes: [...state.recipes, newRecipe],
    })),

  // 'deleteRecipe' action: removes a recipe by its ID.
  deleteRecipe: (idToDelete) =>
    set((state) => ({
      recipes: state.recipes.filter((recipe) => recipe.id !== idToDelete),
    })),

  // 'updateRecipe' action: finds a recipe by ID and updates its properties.
  updateRecipe: (updatedRecipe) =>
    set((state) => ({
      recipes: state.recipes.map((recipe) =>
        recipe.id === updatedRecipe.id ? updatedRecipe : recipe
      ),
    })),

  // 'setRecipes' action: completely replaces the recipes array (useful for initialization).
  setRecipes: (recipes) => set({ recipes }),
}));

// Export the custom hook generated by Zustand, which components will use to interact with the store.
export default useRecipeStore;
